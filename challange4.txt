#include <iostream>
#include <vector>
#include <cmath>
using namespace std;

void mergeInPlace(vector<int>& arr1, vector<int>& arr2, int m, int n) {
    int total = m + n;
    int gap = (total + 1) / 2; 

    while (gap > 0) {
        int i = 0;
        int j = gap;

        while (j < total) {
            int aVal, bVal;

            if (i < m) aVal = arr1[i];
            else aVal = arr2[i - m];

            if (j < m) bVal = arr1[j];
            else bVal = arr2[j - m];

            if (aVal > bVal) {
                if (i < m && j < m) {
                    swap(arr1[i], arr1[j]);
                } else if (i < m && j >= m) {
                    swap(arr1[i], arr2[j - m]);
                } else {
                    swap(arr2[i - m], arr2[j - m]);
                }
            }

            i++;
            j++;
        }

        if (gap == 1) break;
        gap = (gap + 1) / 2; 
    }
}

int main() {
    vector<int> arr1 = {1, 3, 5, 7};
    vector<int> arr2 = {2, 4, 6, 8};

    int m = arr1.size();
    int n = arr2.size();

    mergeInPlace(arr1, arr2, m, n);

    cout << "arr1: ";
    for (int x : arr1) cout << x << " ";
    cout << "\narr2: ";
    for (int x : arr2) cout << x << " ";

    return 0;
}
